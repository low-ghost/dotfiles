// Neo Colemak
// 2015-01-01 Mike Bagwell
// Based on 2006-01-01 Shai Coleman, http://colemak.com/
//
// Features:
// * Colemak base keys
// * Symbol layer derived from the third layer of the Neo keyboard layout:
//   http://neo-layout.org/index_en.html, accessible via holding the 'a' or single quote key
//   on a normal keyboard
// * Right hand numpad accessible via holding 'z'
// * Some vim-esque navigation via holding left shift key
// * Mouse control via right hand numpad via holding right ctrl or 'z' and 'x'
// * CapsLock mapped to ctrl on hold, escape on tap
// * Return mapped to ctrl on hold, return on tap
// * Space bar mapped to shift on hold, space on tap
// * Right shift is alt
// * Compose keys: Multi_key where [ is normally, dead_hook at ], dead_greek at {, dead_stroke at }
//
// Dependencies: xcape
// Full xcape script:
//   xcape -e '#38=a;#48=apostrophe;#65=space;#66=Escape;#52=z;#36=Pause'
// Optional: an ~/.XCompose. xbindkey scripts for F keys generated from ~/.XCompose

// Unused: Number row higher levels, /? key and \| key (though probably use / to much at normal
// position to actually remove it.
// Working on: Mouse keys at home num pad (k on qwerty is click)
// For more stuff, look at xkb/compat/mousekeys

partial alphanumeric_keys
xkb_symbols "basic" {

  include "us"
  name[Group1]= "Neo Colemak";
  name[Group2]= "Symbols";
  name[Group3]= "Numpad";
  name[Group4]= "Nav";

  // ================
  // Miscellaneous
  // ================

  // Scrap keys for xcaperc. Only some of the I* codes work
  // Look at /usr/share/X11/xkb/keycodes/evdev for more
  key <I120> { [ a, A ] };
  key <I129> { [ z, Z ] };
  key <I149> { [ apostrophe, quotedbl ] };
  key <I151> { [ backslash ], [ backslash ] };
  key <I154> { [ space ] };
  // This is convoluted, isn't it? Somehow, works with xcape and mapping keycode for return (36)
  // to Pause
  key <PAUS> { [ Return, Pause ] };
  key <KPEN> { [ bracketleft, braceleft ], [ parenleft ] };
  key <KPEQ> { [ bracketright, braceright ], [ parenright ] };
	key <NMLK> { [ Tab, Tab ] };
	key <INS> { [ Tab, Tab ] };

  // F keys for scripting (xbindkeys an action to F20, xcompose F20 to some comination, and you
  // can get any arbitrary key combo to run anything in linux). Only listing them if xcape ever
  // gets involved
  key <FK13> { [ F13 ] };
  key <FK14> { [ F14 ] };
  key <FK15> { [ F15 ] };
  key <FK16> { [ F16 ] };
  key <FK17> { [ F17 ] };
  key <FK18> { [ F18 ] };
  key <FK19> { [ F19 ] };
  key <FK20> { [ F20 ] };
  key <FK21> { [ F21 ] };
  key <FK22> { [ F22 ] };
  key <FK23> { [ F23 ] };
  key <FK24> { [ F24 ] };
  key <FK24> { [ F24 ] };
  key <FK25> { [ F25 ] };
  key <FK26> { [ F26 ] };
  key <FK27> { [ F27 ] };
  key <FK28> { [ F28 ] };
  key <FK29> { [ F29 ] };
  key <FK30> { [ F30 ] };
  key <FK31> { [ F31 ] };
  key <FK32> { [ F32 ] };
  key <FK33> { [ F33 ] };
  key <FK34> { [ F34 ] };
  key <FK35> { [ F35 ] };

  // ================
  // Number Row
  // ================

  key <TLDE> { [ grave, asciitilde ] };
  key <AE01> {
    [ 1, exclam, F1 ]
    //actions[Group3]=[ LockControls(controls=MouseKeys) ]
  };
  key <AE02> { [ 2, at ] };
  key <AE03> { [ 3, numbersign ] };
  key <AE04> { [ 4, dollar ] };
  key <AE05> { [ 5, percent ] };
  key <AE06> { [ 6, asciicircum ] };
  key <AE07> { [ 7, ampersand ] };
  key <AE08> { [ 8, asterisk, infinity ] };
  key <AE09> { [ 9, parenleft ] };
  key <AE10> {
    [ 0, parenright ],
    [ asterisk ]
  };
  key <AE11> { [ minus, underscore, endash, emdash ] };
  key <AE12> { [ equal, plus, multiply, division ] };

  // ================
  // Q Row
  // ================

  // key <TAB> { [ Super_L, Super_L ] };
  key <AD01> { [ q, Q ], [ any, U2620] };
  key <AD02> { [ w, W ], [ underscore ] };
  key <AD03> { [ f, F ] };
  key <AD04> { [ p, P ], [ any, paragraph ] }; // PILCROW SIGN
  key <AD05> {
    [ g, G ],
    [ asciicircum ],
    [ G ]
  };
  key <AD06> {
    [ j, J ],
    [ exclam, downarrow ],
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK12>, clearmods=Mod5) ],
    actions[Group4]=[ RedirectKey(key=<DOWN>) ]
  };
  key <AD07> {
    [ l, L ],
    [ less, rightarrow ],
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK07>, clearmods=Mod5) ],
    actions[Group3]=[ RedirectKey(key=<AE07>) ],
    //actions[Group3]=[ MovePtr(x=-2, y=-2) ],
    actions[Group4]=[ RedirectKey(key=<RGHT>) ]

  };
  key <AD08> {
    [ u, U ],
    [ greater, U2260 ], // ≠ -- Not Equal To
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK08>, clearmods=Mod5) ],
    actions[Group3]=[ RedirectKey(key=<AE08>) ],
    //actions[Group3]=[ MovePtr(y=-2) ],
    actions[Group4]=[ RedirectKey(key=<PGUP>) ]
  };
  key <AD09> {
    [ y, Y ],
    [ equal, U2261 ], // -: ≡ -- Identical To
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK09>, clearmods=Mod5) ],
    actions[Group3]=[ RedirectKey(key=<AE09>) ]
    //actions[Group3]=[ MovePtr(x=+2, y=-2) ]
  };
  key <AD10> {
    [ semicolon, colon ],
    [ ampersand, U2227 ], // logical and, up caret tilde
    [ minus ]
  };
  key <AD11> { [ BackSpace, BackSpace ] };
  key <AD12> { [ Delete, Delete ] };
  key <BKSL> { [ Multi_key, dead_greek ] };

  // ================
  // A Row
  // ================

  // a is level 3 shift
  key <AC01> {
    [ VoidSymbol, VoidSymbol ],
    actions[Group1]=[ SetGroup(group=2), SetGroup(group=2) ],
    actions[Group2]=[ RedirectKey(key=<I151>) ]
  };
  key <AC02> { [ r, R ], [ slash ] };
  key <AC03> { [ s, S ], [ braceleft, U2606 ] }; // Star
  key <AC04> {
    [ t, T ],
    [ braceright, therefore ],
    actions[Group4]=[ RedirectKey(key=<DELE>) ]
  };
  key <AC05> {
    [ d, D ],
    [ asterisk, degree ],
    actions[Group4]=[ RedirectKey(key=<PGDN>) ]
  };
  key <AC06> {
    [ h, H ],
    [ question, leftarrow ],
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK11>, clearmods=Mod5) ],
    actions[Group4]=[ RedirectKey(key=<LEFT>) ]
  };
  key <AC07> {
    [ n, N ],
    [ parenleft ],
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK04>, clearmods=Mod5) ],
    actions[Group3]=[ RedirectKey(key=<AE04>) ],
    actions[Group4]=[ RedirectKey(key=<BKSP>) ]
    //actions[Group3]=[ MovePtr(x=-2) ]
  };
  key <AC08> {
    [ e, E ],
    [ parenright, U21D4 ],
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK05>, clearmods=Mod5)],
    actions[Group3]=[ RedirectKey(key=<AE05>)],
    //PointerButton(button=default) 
    actions[Group4]=[ RedirectKey(key=<END>) ]
  };
  key <AC09> {
    [ i, I ],
    [ minus, U221e ], // Infinity
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK06>, clearmods=Mod5) ],
    //actions[Group3]=[ MovePtr(x=+2) ],
    actions[Group3]=[ RedirectKey(key=<AE06>) ],
    actions[Group4]=[ RedirectKey(key=<HOME>) ]
  };
  key <AC10> {
    [ o, O ],
    [ colon ],
    [ plus ],
    actions[Group4]=[ RedirectKey(key=<RTRN>) ]
  };
  // apostrophe is level 3 shift
  key <AC11> {
    [ VoidSymbol, VoidSymbol ],
    actions[Group1]=[ SetGroup(group=2) ],
    actions[Group2]=[ RedirectKey(key=<I149>) ]
  };

  // ================
  // Z Row
  // ================

  // z is NumLock shift accessor.
  key <AB01> {
    [ VoidSymbol, VoidSymbol ],
    [ VoidSymbol ],
    [ VoidSymbol ],
    actions[Group1]=[ SetGroup(group=3) ],
    actions[Group2]=[ RedirectKey(key=<AE03>, modifiers=shift) ]
  };
  key <AB02> {
    [ x, X ],
    [ dollar, cent ],
    actions[Group3]=[ RedirectKey(key=<BKSP>) ],
    actions[Group4]=[ SetGroup(group=5) ]
  };
  key <AB03> {
    [ c, C ],
    [ bar, U2228 ], // logical or
    actions[Group4]=[ RedirectKey(key=<DELE>) ]
  };
  key <AB04> { [ v, V ], [ asciitilde, U2248 ] }; // almost equal to
  key <AB05> { [ b, B ], [ grave, because ] };
  key <AB06> {
    [ k, K ],
    [ plus, uparrow ],
    [ 0 ],
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK10>, clearmods=Mod5) ],
    actions[Group4]=[ RedirectKey(key=<UP>) ]
  };
  key <AB07> {
    [ m, M ],
    [ percent, U1F355 ],
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK01>, clearmods=Mod5) ],
    actions[Group3]=[ RedirectKey(key=<AE01>) ]
    //actions[Group3]=[ MovePtr(x=-2, y=+2) ],
  };
  key <AB08> {
    [ comma, less ],
    [ comma, U2264 ], // ≤ -- Less-than Or Equal To
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK02>, clearmods=Mod5) ],
    actions[Group3]=[ RedirectKey(key=<AE02>) ]
    //actions[Group3]=[ MovePtr(y=+2) ],
  };
  key <AB09> {
    [ period, greater ],
    [ at, U2265 ], // ≥ -- Greater-than Or Equal To
    actions[Group1]=[ NoAction(), NoAction(), RedirectKey(key=<FK03>, clearmods=Mod5) ],
    actions[Group3]=[ RedirectKey(key=<AE03>) ]
    //actions[Group3]=[ MovePtr(x=+2, y=+2) ]
  };
  key <AB10> { [ slash, question ], [ numbersign, U203D ] }; // Interrobang

  key <RTRN> { [ Control_R, Control_R ] };
  key <LCTL> {
    [ ISO_Level3_Shift, ISO_Level3_Shift ],
    [ ISO_Level3_Shift, ISO_Level3_Shift ],
    [ ISO_Level3_Shift, ISO_Level3_Shift ]
  };
  key <LFSH> {
    [ VoidSymbol, VoidSymbol ],
    actions=[ SetGroup(group=4) ]
  };
  key <RTSH> {
    [ VoidSymbol, VoidSymbol ],
    actions=[ SetGroup(group=4) ]
  };
  key <LWIN> { [ Super_L ], [ Super_L ] };
  key <BKSP> { [ VoidSymbol, VoidSymbol ] };

  include "level5(modifier_mapping)"
  include "nc(caps_cntr)"
  include "nc(space_shift)"
  include "nc(rctrl_ralt)"
};

partial modifier_keys
xkb_symbols "caps_cntr" {
  replace key <CAPS> { [ Control_L, Control_L ] };
  modifier_map  Control { <CAPS> };
};

// No longer used, I kept locking unintentionally by hitting rctrl… Can be reimplemented with
//   include "nc(lctl_5_lock)"
// in this file
partial modifier_keys
xkb_symbols "lctl_5_lock" {
  replace key <LCTL> { [ ISO_Level5_Lock, ISO_Level5_Lock ] };
  modifier_map  Mod3 { <LCTL> };
};

// No longer used, cleaner to have nav as group (so modifiers work),
// than as level 5 of EIGHT_LEVEL_ALPHABETIC
partial modifier_keys
xkb_symbols "lshift_5_shift" {
  replace key <LFSH> { [ ISO_Level5_Shift, ISO_Level5_Shift ] };
  modifier_map  Mod3 { <LFSH> };
};

partial modifier_keys
xkb_symbols "rshift_ralt" {
  replace key <RTSH> { [ Alt_L, Alt_L ] };
  modifier_map Mod1 { <RTSH> };
};

partial modifier_keys
xkb_symbols "rctrl_ralt" {
  replace key <RCTL> { [ Alt_R, Alt_R ] };
  modifier_map Mod1 { <RCTL> };
};

partial modifier_keys
xkb_symbols "space_shift" {
  replace key <SPCE> { [ Shift_L, Shift_L ] };
  modifier_map Shift { <SPCE> };
};
