#!/bin/zsh

# ejson {
# TODO: if has .json
encjson() { ejson encrypt $1.json }
decjson() { ejson decrypt $1.json | tee t.json && mv t.json $1.json }
# }

whatsonport() { sudo netstat -tulnap | grep :$1 }

clip() { "$1" | xclip -sel clip }

his() {
  if [ -z "$1" ]; then
      history
  else
      history | grep "$@"
  fi
}
_his_completion () {
  grep --help
}
_his () {
  compadd -S '' `_his_completion`
}

# docker {

alias dc='docker-compose'
alias dcs='docker-compose stop'
alias ds='docker stop'
alias dps='docker ps'

dstopall() { docker stop $(docker ps -a -q) }
alias drmall='docker rm $(docker ps -a -q)'
dbuild() {
  dir=${PWD##*/}
  docker build -t ${1-$dir} .
}
dockerlink() { docker run -it --link $1:postgres --rm postgres sh -c 'exec psql -h "$POSTGRES_PORT_5432_TCP_ADDR" -p "$POSTGRES_PORT_5432_TCP_PORT" -U exm-app-development exm-development' }

# }
# node {

alias nvmc='nvm current'
alias nvma='nvm alias'
alias nvmi='nvm install'
alias nvml='nvm ls'
alias nlo='nvm exec latest node ~/repo/js-repl/_'
alias nlo4='nvm exec latest node ~/repo/js-repl/_4'
alias nvlo='NODE_NO_READLINE=1 rlwrap -P "const [lo, fp] = [require(\"lodash\"), require(\"lodash/fp\")];" -r --always-readline node'
alias ncw='nvm exec latest node ~/repo/js-repl/cw'
alias ncwp='APP_ENV=production nvm exec latest node ~/repo/js-repl/cw'
alias npml='npm link'

nvmu(){
  nvm use $1 && sed -i 's/\(nvm use \).*\( > \/dev\/null\)/\1'$1'\2/' ~/.zshrc                                                                                              feature-dockerize  +2
}

# }
# git {

# stash, but keep files
alias -g gstai='git stash --keep-index'
# same, but more fun
alias -g gstain='git stash --keep-index'
# ignore file in git
alias -g gic='git update-index --assume-unchanged'
# ignore dir in git
gicd() {
  git update-index --assume-unchanged `git ls-files --directory $1 -z` > /dev/null 2>&1
}
# restore watching file in git
alias -g ungic='git update-index --no-assume-unchanged'
#unignore dir
ungicd() {
  git update-index --no-assume-unchanged `git ls-files --directory $1 -z` > /dev/null 2>&1
}
alias -g gcan='git commit -a -n -m'
gpan() {
  echo "Enter a message"
  read message
  `git commit -a -n -m $message; ggpush`
}

# git unadd: remove file from
gun() { git reset HEAD $@ ;}
_gitunadd_completion() {
  git diff --cached --name-only --diff-filter=A
}
_gitunadd () {
  compadd -S '' `_gitunadd_completion`
}

# generate git ignore from gitignore.io
gi() { curl -sL https://www.gitignore.io/api/`echo $@ | sed s/" "/,/g` ;}
_gitignoreio_completion() {
  curl -sL https://www.gitignore.io/api/list | tr "," "\n"
}
_gitignoreio () {
  compset -P '*,'
  compadd -S '' `_gitignoreio_completion`
}

# clone from the excel micro repo
gclex() {
  if [ -z "$1" ]; then
    repo=`_gclex_completion | fzf`
    if [ -z "$repo" ]; then
      echo 'no repo chosen'
      return
    fi
  else
    repo=$1
  fi
  git clone git@bitbucket.org:excelmicro/$repo.git ~/repo/$repo
}
_gclex_completion() {
  cat ~/repo/.temp_list | jq '.values | .[].full_name' | sed 's:"excelmicro/\(.*\)":\1:g'
}
_gclex () {
  compset -P '*,'
  compadd -S '' `_gclex_completion`
}

# }
# apt {

alias apt='sudo apt-get'
alias apti='sudo apt-get install'
alias aptu='sudo apt-get update'

# }

# simple calculations
calc() { echo $1 | bc -l }

alias pgdevstart='docker run -d -p 5432:5432 postgres'

pyserve() {
  if [ -z "$1" ]; then
    timeout 1h python -m SimpleHTTPServer; notify-send 'python server shutdown'
  else
    timeout "$@" python -m SimpleHTTPServer; notify-send 'python server shutdown'
  fi
}
alias rdevstart='docker run -p 6379:6379 -d redis'

pgexm() {
    if [ $# -eq 0 ]; then
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_EXM
    elif [ $# -eq 1 ]; then
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_EXM -c $1 -t
    else
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_EXM -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t | jq $2
    fi
}

pgprod() {
    if [ $# -eq 0 ]; then
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_PROD
    elif [ $# -eq 1 ]; then
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_PROD -c $1 -t
    else
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_PROD -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t | jq $2
    fi
}

pgloc() {
    if [ $# -eq 0 ]; then
        command psql -h $PG_HOST_LOC -U $PG_USER_LOC -d $PG_DB_LOC
    elif [ $# -eq 1 ]; then
        command psql -h $PG_HOST_LOC -U $PG_USER_LOC -d $PG_DB_LOC -c $1 -t
    else
        command psql -h $PG_HOST_LOC -U $PG_USER_LOC -d $PG_DB_LOC -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t | jq $2
    fi
}

pgjacob() {
    if [ $# -eq 0 ]; then
        command psql -h 192.168.0.218 -U $PG_USER_LOC -d $PG_DB_EXM
    elif [ $# -eq 1 ]; then
        command psql -h 192.168.0.218 -U $PG_USER_LOC -d $PG_DB_EXM -c $1 -t
    else
        command psql -h 192.168.0.218 -U $PG_USER_LOC -d $PG_DB_EXM -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t | jq $2
    fi
}

pgsta() {
    if [ $# -eq 0 ]; then
        command psql -h $PG_HOST_EXM -U $PG_USER_LOC -d exm-staging
    elif [ $# -eq 1 ]; then
        command psql -h $PG_HOST_EXM -U $PG_USER_LOC -d exm-staging -c $1 -t
    else
        command psql -h $PG_HOST_EXM -U $PG_USER_LOC -d exm-staging -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t | jq $2
    fi
}

# change dir to git root
alias cdg='cd `git rev-parse --show-toplevel`'
cdr() {
  if [ -z "$1" ]; then
    repo=`_cdr_completion | fzf`
    if [ -z "$repo" ]; then
      echo 'no repo chosen'
      return
    fi
  else
    repo=$1
  fi
  cd ~/repo/$repo
}
_cdr_completion() {
  ls ~/repo
}
_cdr() {
  compset -P '*,'
  compadd -S '' `_cdr_completion`
}

# start a test environment
alias testenv='env $(ejson decrypt test.json | python ./env.py) docker-compose -f pg-redis.yml up'

# master git
alias gcom='git checkout master'

# npm view
alias npmv='npm view'

function npmvv() {
  npm view $1 versions
}

# npm install
alias npmi='npm i'
alias npmis='npm i -S'
alias npmid='npm i -D'
alias npmig='npm i -g'

# google and firefox
goog() {
  firefox google.com/#q=$1
  sleep .5
  wmctrl -a 'google'
}

fire() {
  firefox -vimperator "+c 'js liberator.sleep(1000) && liberator.open(\"$@\")'"
}

# raise spotify window
alias spo="wmctrl -ia `wmctrl -lx | grep spotify.Spotify | awk '{ print $0 }'`"

# notify current track info
spoc() {
  current=`. ~/sp current`
  notify-send $current
}

# get the jira issue from the current branch name
alias gitissue="git rev-parse --abbrev-ref HEAD | sed 's/\([a-zA-Z]*-[0-9]*\).*/\1/'"
