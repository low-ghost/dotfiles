# keyboard {

alias xkbclear='sudo rm /var/lib/xkb/*.xkm'
# does not work?
alias xkbinit= '. ~/.xcaperc'

# }
# configs {

alias eali='vim ~/.aliases'
alias ezsh='vim ~/.zshrc'

# }
# alias {

addali() {
  echo "Enter a description for the alias:"
  read comment
  echo "# $comment" >> ~/.aliases
  echo "alias $1='`fc -ln -1`'" >> ~/.aliases
}

# }
# ejson {

encjson() { ejson encrypt $1.json }
decjson() { ejson decrypt $1.json | tee t.json && mv t.json $1.json }

# }

countdown() {
   date1=$((`date +%s` + $1)); 
   while [ "$date1" -ne `date +%s` ]; do 
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 0.1
   done
   notify-send 'countdown finished'
}
whatsonport() { sudo netstat -tulnap | grep :$1 }


clip() { "$1" | xclip -sel clip }

tmuxa() { tmux -2 attach -t `echo $1 | cut -d ":" -f 1` }
_tmuxa_completion() {
  tmux ls | awk '{print $1$2"-"$3":"$5"-"$6"-"$7}'
}
_tmuxa () {
  compadd -S '' `_tmuxa_completion`
}
compdef _tmuxa tmuxa

his() {
  if [ -z "$1" ]
    then
        history
    else
        history | grep "$@"
    fi
}
_his_completion () {
  grep --help
}
_his () {
  compadd -S '' `_his_completion`
}
compdef _his his

# docker {

alias dc='docker-compose'
alias dcs='docker-compose stop'
alias ds='docker stop'
compdef _ds ds='docker stop'
alias dps='docker ps'

dstopall() { docker stop $(docker ps -a -q) }
drmall() { docker rm $(docker ps -a -q) }
dbuild() {
  dir=${PWD##*/}
  docker build -t ${1-$dir} .
}
dockerlink() { docker run -it --link $1:postgres --rm postgres sh -c 'exec psql -h "$POSTGRES_PORT_5432_TCP_ADDR" -p "$POSTGRES_PORT_5432_TCP_PORT" -U exm-app-development exm-development' }

# }
# node {

alias nvmc='nvm current'
alias nvmu='nvm use'
alias nvma='nvm alias'
alias nvmi='nvm install'
alias noden='node --es_staging --harmony_destructuring --harmony_default_parameters'
alias nlo='nvm exec new node --es_staging --harmony_destructuring --harmony_default_parameters ~/js/_'
alias nlo4='nvm exec new node --es_staging --harmony_destructuring --harmony_default_parameters ~/js/_4'
alias nvlo='NODE_NO_READLINE=1 rlwrap -P "const [lo, fp] = [require(\"lodash\"), require(\"lodash/fp\")];" -r --always-readline node --es_staging --harmony_destructuring --harmony_default_parameters'
alias ncw='nvm exec new node --es_staging --harmony_destructuring --harmony_default_parameters ~/js/cw'
alias npml='npm link'
compdef _npml npml='cd '


# }
# git {

# stash, but keep files
alias -g gstai='git stash --keep-index'
# same, but more fun
alias -g gstain='git stash --keep-index'
# ignore file in git
alias -g gic='git update-index --assume-unchanged'
# restore watching file in git
alias -g ungic='git update-index --no-assume-unchanged'
alias -g gcan='git commit -a -n -m'
gpan() {
  echo "Enter a message"
  read message
  `git commit -a -n -m $message; ggpush`
}

# git unadd: remove file from
gun() { git reset HEAD $@ ;}
_gitunadd_completion() {
  git diff --cached --name-only --diff-filter=A
}
_gitunadd () {
  compadd -S '' `_gitunadd_completion`
}
compdef _gitunadd gun

# generate git ignore from gitignore.io
gi() { curl -sL https://www.gitignore.io/api/`echo $@ | sed s/" "/,/g` ;}
_gitignoreio_completion() {
  curl -sL https://www.gitignore.io/api/list | tr "," "\n"
}
_gitignoreio () {
  compset -P '*,'
  compadd -S '' `_gitignoreio_completion`
}
compdef _gitignoreio gi

# clone from the excel micro repo
gclex() {
  git clone git@bitbucket.org:excelmicro/$1.git ~/repo/$1
}

# }
# apt {

alias apt='sudo apt-get'
compdef _apt apt='sudo apt-get'
alias apti='sudo apt-get install'
compdef _apti apti='sudo apt-get install'
alias aptu='sudo apt-get update'

# }

# simple calculations
calc() { echo $1 | bc -l }

alias pgdevstart='docker run -d -p 5432:5432 postgres'
alias pgdev='psql -U postgres -h localhost' 

pyserve() {
  if [ -z "$1" ]
    then
      timeout 1h python -m SimpleHTTPServer; notify-send 'python server shutdown'
    else
      timeout "$@" python -m SimpleHTTPServer; notify-send 'python server shutdown'
    fi
}
alias rdevstart='docker run -p 6379:6379 -d redis'

pgexm() {
    if [ $# -eq 0 ]; then
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_EXM
    elif [ $# -eq 1 ]; then
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_EXM -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t
    else
        command psql -h $PG_HOST_EXM -U $PG_USER_EXM -d $PG_DB_EXM -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t | jq $2
    fi
}

pgloc() {
    if [ $# -eq 0 ]; then
        command psql -h $PG_HOST_LOC -U $PG_USER_LOC -d $PG_DB_LOC
    elif [ $# -eq 1 ]; then
        command psql -h $PG_HOST_LOC -U $PG_USER_LOC -d $PG_DB_LOC -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t
    else
        command psql -h $PG_HOST_LOC -U $PG_USER_LOC -d $PG_DB_LOC -c "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM ($1) AS fooo;" -t | jq $2
    fi
}

# recently added {
