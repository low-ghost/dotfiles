#!/bin/zsh

# $1: function - completion function
# $2: function - function itself, expecting one arg
# $3: any - initial parameter
fzf_ize() {
  local completion_func=$1
  local func=$2
  local initial_param=$3
  local _eval_fzf() {
    local result
    if [[ -z "$1" ]]; then
      result=`$completion_func | fzf -1`
      if [[ "$?" == 130 ]]; then
        echo 'no items were chosen'
        return
      fi
    fi
    { # try
      if [[ -n "$result" ]]; then
        $func $result 2>/dev/null
      else
        result=`$completion_func | fzf -1 -q $1`
        if [[ "$?" == 130 ]]; then
          echo 'no items were chosen'
          return
        fi
        $func $result
      fi
    } || { # catch
      result=`$completion_func | fzf -1 -q $1`
      if [[ "$?" == 130 ]]; then
        echo 'no items were chosen'
        return
      fi
      $func $result
    }
  }
  _eval_fzf $initial_param
}

# ejson {
encjson() {
  file=`echo $1 | sed 's/\.json$//'`
  ejson encrypt $file.json
}
decjson() {
  file=`echo $1 | sed 's/\.json$//'`
  ejson decrypt $file.json | tee t.json && mv t.json $file.json
}
# }

whatsonport() { sudo netstat -tulnap | grep :$1 }

clip() { "$1" | xclip -sel clip }

# docker {

alias dc='sudo docker-compose'
alias dcs='sudo docker-compose stop'
alias ds='sudo docker stop'
alias dps='sudo docker ps'
alias dr='sudo docker rm'
alias dls='sudo docker ps -a'

dstopall() { docker stop $(docker ps -a -q) }
alias drmall='docker rm $(docker ps -a -q)'
dbuild() {
  dir=${PWD##*/}
  sudo docker build -t ${1-$dir} .
}
dbuilde() {
  dir=${PWD##*/}
  echo ${1-$dir}
}

# }
# node {

alias nvmc='nvm current'
alias nvma='nvm alias'
alias nvmi='nvm install'
alias nvml='nvm ls'
alias nlo='nvm exec latest node ~/repo/js-repl/standard/lo'
alias npml='npm link'

nvmu(){
  nvm use $1 && sed -i 's/\(nvm use \).*\( > \/dev\/null\)/\1'$1'\2/' ~/.zshrc
}

# }
# git {

# stash, but keep files
alias -g gstai='git stash --keep-index'
# same, but more fun
alias -g gstain='git stash --keep-index'
# ignore file in git
alias -g gic='git update-index --assume-unchanged'
# ignore dir in git
gicd() {
  git update-index --assume-unchanged `git ls-files --directory $1 -z` > /dev/null 2>&1
}
# restore watching file in git
alias -g ungic='git update-index --no-assume-unchanged'
#unignore dir
ungicd() {
  git update-index --no-assume-unchanged `git ls-files --directory $1 -z` > /dev/null 2>&1
}
alias -g gcan='git commit -a -n -m'
gpan() {
  echo "Enter a message"
  read message
  `git commit -a -n -m $message; ggpush`
}

# git unadd: remove file from
gun() { git reset HEAD $@ ;}
_gitunadd_completion() {
  git diff --cached --name-only --diff-filter=A
}
_gitunadd () {
  compadd -S '' `_gitunadd_completion`
}

# search all branches for a file (regex w/ rg)
gfsgrep() {
  for branch in `git for-each-ref --format="%(refname)" refs/heads`; do
    found_file=`git ls-tree -r --name-only $branch | rg $1`
    if [[ ! -z "${found_file// }" ]]; then
      echo $branch: $found_file
    fi
  done
}

# }
# apt {

alias apt='sudo apt-get'
alias apti='sudo apt-get install'
alias aptu='sudo apt-get update'

# }

# simple calculations
calc() { echo $1 | bc -l }

alias pgdevstart='docker run -d -p 5432:5432 postgres'

pyserve() {
  if [ -z "$1" ]; then
    timeout 1h python -m SimpleHTTPServer; notify-send 'python server shutdown'
  else
    timeout "$@" python -m SimpleHTTPServer; notify-send 'python server shutdown'
  fi
}

groot() {
  git rev-parse --show-toplevel
}
# change dir to git root
alias cdg='cd `groot`'

_cdr_pre_fzf() { cd ~/repo/$1 }
_cdr_completion() {
  ls ~/repo
}
_cdr() {
  compset -P '*,'
  compadd -S '' `_cdr_completion`
}
cdr() {
  fzf_ize "_cdr_completion" "_cdr_pre_fzf" $1
}

_cdrg_pre_fzf() { cd $1 }
_cdrg_completion() {
  find ~/go/src/ -type d -print | grep -v '\.git\|golang\|gometalinter\|go-quickfix\|gocode'
}
_cdrg() {
  compset -P '*,'
  compadd -S '' `_cdrg_completion`
}
cdrg() {
  fzf_ize "_cdrg_completion" "_cdrg_pre_fzf" $1
}

# npm view
alias npmv='npm view'

function npmvv() {
  npm view $1 versions
}

# npm install
alias npmi='npm i'
alias npmis='npm i -S'
alias npmid='npm i -D'
alias npmig='npm i -g'

# google and firefox
goog() {
  firefox google.com/#q=$1
  sleep .5
  wmctrl -a 'google'
}

fire() {
  firefox -vimperator "+c 'js liberator.sleep(1000) && liberator.open(\"$@\")'"
}

# raise spotify window
alias spo="wmctrl -ia `wmctrl -lx | grep spotify.Spotify | awk '{ print $0 }'`"

# notify current track info
spoc() {
  current=`. ~/sp current`
  notify-send $current
}

gcmi() {
  git commit -m "`gitissue`: $1"
}
gcmin() {
  git commit -n -m "`gitissue`: $1"
}
# better xev
alias xev='xev | sed -ne '/^KeyPress/,/^$/p''

alias gbcur="git rev-parse --abbrev-ref HEAD"
gb_to_issue() {
  echo $1 | sed 's/^\([[:alnum:]]*\)-\([[:alnum:]]*\)-.*/\1-\2/'
}
# get the jira issue from the current branch name
gitissue() {
  gb_to_issue `gbcur`
}
# jira issue
#jiraissue() {
  #curl -s --netrc-file ~/.jira-netrc -X GET -H "Content-Type:application/json" \
    #https://excelmicro.atlassian.net/rest/api/2/issue/$1 | jq .fields.summary
#}
gname() {
  git remote show origin -n | grep "Fetch URL:" | sed -E 's:^.*/(.*).git$:\1:g'
}
# jira issue from git
#gjira() {
  #if [ $# -eq 0 ]; then
    #branch=`gbcur`
    #issue=`gb_to_issue $branch`
    #project_name=`gname`
  #elif [ $# -eq 1 ]; then
    #issue=`gb_to_issue $1`
    #project_name=`gname`
  #else
    #issue=`gb_to_issue $1`
    #project_name=$2
  #fi
  #cached_file_dir=$HOME/.jira-descriptions/$project_name
  #cached_file_loc=$cached_file_dir/$issue
  #if [ -f $cached_file_loc ]; then
    #cat $cached_file_loc
  #else
    #summary=`jiraissue $issue`
    #mkdir -p $cached_file_dir
    #touch $cached_file_loc
    #echo $summary > $cached_file_loc
    #echo $summary
  #fi
#}

#gbjira() {
  #remote=false
  #color=true
  #while [[ "$#" -gt 0 ]]; do
    #case "$1" in
      #-r|--remote) remote=true;;
      #-n|--nocolor) color=false;;
    #esac
    #shift
  #done
  #if [ "$remote" = true ]; then
    #branches=(`git branch -r | cut -c 3-`)
  #else
    #branches=(`git for-each-ref --format='%(refname)' refs/heads/ | sed 's|refs/heads/||'`)
  #fi
  #for unformatted_branch in $branches; do
    #branch=`echo $unformatted_branch | sed 's/^[[:alnum:]]*\///'`
    #desc=`gjira $branch`
    #if [ $branch == `git rev-parse --abbrev-ref HEAD` ]; then
      #if [ $color == true ]; then
        #branch="* \033[0;32m$branch\033[0m"
      #else
        #branch="* $branch"
      #fi
    #else
      #branch="  $branch"
    #fi
    #if [ $color == true ]; then
      #echo -e "$branch: \033[0;36m$desc\033[0m"
    #else
      #echo -e "$branch: $desc"
    #fi
  #done
#}
#_gcof_pre_fzf() {
  #gco `echo $1 | sed 's/^..\(.*\):\(.*\)/\1/'`
#}
#_gcof_completion() {
  #gbjira -r -n
#}
#_gcof () {
  #compset -P '*,'
  #compadd -S '' `_gcof_completion`
#}
#gcof() {
  #fzf_ize "_gcof_completion" "_gcof_pre_fzf" $1
#}
##alias gbc="gbjira | grep `gbcur`"
#bb() {
  #while [[ "$#" -gt 1 ]]; do
    #case "$1" in
      #-b|--branch) branch="$2";;
      #-p|--project) project_name="$2";;
    #esac
    #shift
  #done
  #project_name=${project_name:=`gname`}
  #branch=${branch:=`gbcur`}
  #firefox https://bitbucket.com/excelmicro/$project_name/src/?at=$branch
#}
jj() {
  branch=${1:-`gbcur`}
  issue=`gb_to_issue $branch`
  firefox https://$JIRA_SITE/browse/$issue
}

# TODO: execute a file
#alias pgexec='echo "SELECT array_to_json(array_agg(row_to_json(fooo))) FROM (`cat modules/sql/audit/retrieval.sql | sed 's/;//g'`) AS fooo;" | sed 's/to_timestamp(\$.)/now()/g' | sed 's/\$/:v/g' | psql -h $PG_HOST_EXM -U $PG_USER_LOC -d exm-staging -t -v v1=62530 -v v2=314 | jq .'

# typescript to json helper
#tsc-json() {
  #./node_modules/typescript-json-schema/bin/typescript-json-schema \
    #models/$1/types.d.ts $2 --keywords errorMessage,id,title --required > schema/$1/$3.json
#}

# thesaurus lookup
thesaur() {
  curl http://words.bighugelabs.com/api/2/$THES_KEY/$1/json | jq .
}
alias other-words='thesaur'

#pr() {
  #branch=`gbcur`
  #desc=${2:-`gjira`}
  #firefox `bitbucket pull_request --owner excelmicro --title "$branch: $desc" $branch $1 \
    #| grep 'Link:' \
    #| sed 's/.*Link: \(.*\)/\1/'`
#}

# checkout files from the current branch
alias gcoc='gco `gbcur` -- '

_egit_pre_fzf() { vim $1 }
_egit_completion() {
  git ls-files
}
_egit() {
  compset -P '*,'
  compadd -S '' `_egit_completion`
}
egit() {
  fzf_ize "_egit_completion" "_egit_pre_fzf" $1
}

# get linux release info
alias compinfo='cat /etc/lsb-release'

# go to github for ssh repo
ghub() {
  firefox https://github.com/`git config --get "remote.origin.url" | sed 's/git@github.com:\(.*\)\(\.git$\|$\)/\1/'`
}
ghubb() {
  firefox https://github.com/`git config --get "remote.origin.url" | sed 's/git@github.com:\(.*\)\(\.git$\|$\)/\1/'`/tree/`gbcur`
}

_gcof_pre_fzf() {
  git checkout $1
}
_gcof_completion() {
  git branch --sort=-committerdate | sed 's/^\(\*\|\)\s*//g'
}
_gcof () {
  compset -P '*,'
  compadd -S '' `_gcof_completion`
}
gcof() {
  fzf_ize "_gcof_completion" "_gcof_pre_fzf" $1
}

_wgo_completion() {
  wmctrl -l
}
_wgo_func() {
  echo $1 | awk '{print $1}' | xargs wmctrl -i -a
}
wgo() {
  fzf_ize "_wgo_completion" "_wgo_func" $1
}

# commits sorted by last commit
alias glast="git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"

gclcar () {
  name=${2:-$1}
  gcl git@github.com:Getsidecar/$1 ~/repo/$name
}

# execute a graphql query
graphql() {
  curl 'localhost:4000/graphql' \
    -H "Authorization: Bearer $TOKEN" \
    -H "Content-Type: application/json" \
    -d "{ \"query\": \"query $1\" }" | jq .
}
